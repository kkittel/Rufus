//
//  database.m
//  MemApp
//
//  Created by Karl Kittel on 3/8/09.
//  Copyright 2009 Countryside Software. All rights reserved.
//

#import <stdio.h>
#import <string.h>
#import "snlup.h"
#import "io.h"

//void create_dirs(void)
void create_phrase_file(void)
{
	FILE *phrase_file;
	
	//if(access_file("phrases.frs")==0);
	//else
	//{
		phrase_file = openfile("phrases.frs", "w");
		fprintf(phrase_file,  "<object> it\n");
		fprintf(phrase_file,  "replace last\n");
		fprintf(phrase_file,  "thing\n");
		fprintf(phrase_file,  "normal\n");	
		fprintf(phrase_file,  "hello im <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> chewed <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "say a fact with two objects\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> played with <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "say a fact with two objects\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "not <object> are <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a impliesnot b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> can not <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a impliesnot b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> found <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "say a fact with two objects\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "am <object>\n");
		fprintf(phrase_file,  "find one fact yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "can <object>\n");
		fprintf(phrase_file,  "find one fact yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "how many <object> does <object> have\n");
		fprintf(phrase_file,  "find one fact \n");
		fprintf(phrase_file,  "ask a question with two objects\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "what <object> was <object>\n");
		fprintf(phrase_file,  "find two facts \n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "what did <object> do with <object>\n");
		fprintf(phrase_file,  "find one fact\n");
		fprintf(phrase_file,  "ask a question with two objects\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "what did <object> find\n");
		fprintf(phrase_file,  "find one fact plus found\n");
		fprintf(phrase_file,  "ask a question with one object\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "what do i <object>\n");
		fprintf(phrase_file,  "find one fact plus i\n");
		fprintf(phrase_file,  "ask a question with one object\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "what can <object> do\n");
		fprintf(phrase_file,  "find one fact plus can\n");
		fprintf(phrase_file,  "ask a question with one object\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "where do <object>\n");
		fprintf(phrase_file,  "find one fact\n");
		fprintf(phrase_file,  "ask a question with one object\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "where did <object> go\n");
		fprintf(phrase_file,  "find one fact\n");
		fprintf(phrase_file,  "ask a question with one object\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "what did <object> do\n");
		fprintf(phrase_file,  "find one fact\n");
		fprintf(phrase_file,  "ask a question with one object\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "when is <object>\n");
		fprintf(phrase_file,  "find one facts plus is\n");
		fprintf(phrase_file,  "ask a question with one object\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "<object> can <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "do <object> live in <object>\n");
		fprintf(phrase_file,  "find two facts yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "<object> live in <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "am <object> a <object>\n");
		fprintf(phrase_file,  "find two facts yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "how <object> are <object>\n");
		fprintf(phrase_file,  "find two facts\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "how <object> am <object>\n");
		fprintf(phrase_file,  "find two facts\n");
		fprintf(phrase_file,  "ask question with two objects\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "who am <object>\n");
		fprintf(phrase_file,  "find one fact plus am\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "what am <object>\n");
		fprintf(phrase_file,  "find one fact\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "if <object> then <object>\n");
		fprintf(phrase_file,  "record rule temporary\n");
		fprintf(phrase_file,  "if a then b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "does my <object> have <object>\n");
		fprintf(phrase_file,  "find two facts yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "does <object> have <object>\n");
		fprintf(phrase_file,  "find two facts yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "do <object> have <object>\n");
		fprintf(phrase_file,  "find all facts yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "most <object> have <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> jumped over <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "what was <object>\n");
		fprintf(phrase_file,  "find one fact plus was\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");	
		fprintf(phrase_file,  "what is <object>\n");
		fprintf(phrase_file,  "find one fact plus is\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "what are <object>\n");
		fprintf(phrase_file,  "find one fact plus are\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "who are <object>\n");
		fprintf(phrase_file,  "find one fact plus are\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "why is <object>\n");
		fprintf(phrase_file,  "find one fact plus because\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "why was <object>\n");
		fprintf(phrase_file,  "find one fact plus because\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "how are <object>\n");
		fprintf(phrase_file,  "find one facts plus am\n");
		fprintf(phrase_file,  "ask question with one object\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "why are <object>\n");
		fprintf(phrase_file,  "find one fact plus because\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "what <object> are <object>\n");
		fprintf(phrase_file,  "find two facts\n");
		fprintf(phrase_file,  "see if b implies a\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "what <object> am <object>\n");
		fprintf(phrase_file,  "find two facts plus am\n");
		fprintf(phrase_file,  "see if b implies a\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "what does <object> want\n");
		fprintf(phrase_file,  "find one fact plus wants\n");
		fprintf(phrase_file,  "see if b implies a\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "how <object> is <object>\n");
		fprintf(phrase_file,  "find two facts\n");
		fprintf(phrase_file,  "see if b implies a\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "what do i know about <object>\n");
		fprintf(phrase_file,  "find one facts\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "tell me about <object>\n");
		fprintf(phrase_file,  "find one facts\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "is this <object>\n");
		fprintf(phrase_file,  "find one facts plus is yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "is <object> name <object>\n");
		fprintf(phrase_file,  "find two facts plus is yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "is <object> not <object>\n");
		fprintf(phrase_file,  "find two facts plus is yesno\n");
		fprintf(phrase_file,  "see if a impliesnot b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "is <object> a <object>\n");
		fprintf(phrase_file,  "find two facts plus is yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "is <object> an <object>\n");
		fprintf(phrase_file,  "find two facts plus is yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "is <object>\n");
		fprintf(phrase_file,  "find all facts plus is yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "are these <object>\n");
		fprintf(phrase_file,  "find one facts yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "are <object> not <object>\n");
		fprintf(phrase_file,  "find two facts yesno\n");
		fprintf(phrase_file,  "see if a impliesnot b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "are <object> a <object>\n");
		fprintf(phrase_file,  "find two facts yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "are <object> an <object>\n");
		fprintf(phrase_file,  "find two facts yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "are <object>\n");
		fprintf(phrase_file,  "find one fact yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> is here\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> wants <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "does <object> work here\n");
		fprintf(phrase_file,  "find one facts plus works here yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> works here\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "yes\n");
		fprintf(phrase_file,  "yes\n");
		fprintf(phrase_file,  "say yes\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "no\n");
		fprintf(phrase_file,  "no\n");
		fprintf(phrase_file,  "say no\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "knock knock\n");
		fprintf(phrase_file,  "run script anoknok\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "call harley\n");
		fprintf(phrase_file,  "run script callharley\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "run script <object>\n");
		fprintf(phrase_file,  "run script\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "where is <object>\n");
		fprintf(phrase_file,  "find one facts plus is\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "where are <object>\n");
		fprintf(phrase_file,  "find one facts plus are\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "who is <object>\n");
		fprintf(phrase_file,  "find one facts plus is\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> had <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> was <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> is not <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a impliesnot b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> are not <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a impliesnot b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> are <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> has <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> went <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "what <object> is <object>\n");
		fprintf(phrase_file,  "find two facts\n");
		fprintf(phrase_file,  "see if b implies a\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "Fact Recorded\n");
		fprintf(phrase_file,  "acknowledge\n");
		fprintf(phrase_file,  "acknowledge\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "something that is <object>\n");
		fprintf(phrase_file,  "reduce\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<object> is <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "where are <object> from\n");
		fprintf(phrase_file,  "find one fact plus live\n");
		fprintf(phrase_file,  "ask a question with one object\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "where am <object> from\n");
		fprintf(phrase_file,  "find one fact plus live\n");
		fprintf(phrase_file,  "ask a question with one object\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "<object> am <object>\n");
		fprintf(phrase_file,  "record fact temporary\n");
		fprintf(phrase_file,  "a implies b\n");
		fprintf(phrase_file,  "normal\n");	
		fprintf(phrase_file,  "hello\n");
		fprintf(phrase_file,  "greeting\n");
		fprintf(phrase_file,  "greeting\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "hello there\n");
		fprintf(phrase_file,  "greeting\n");
		fprintf(phrase_file,  "greeting\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "hi\n");
		fprintf(phrase_file,  "greeting\n");
		fprintf(phrase_file,  "greeting\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "I am not sure\n");
		fprintf(phrase_file,  "say not sure\n");
		fprintf(phrase_file,  "say not sure\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "I am not sure about that\n");
		fprintf(phrase_file,  "say not sure\n");
		fprintf(phrase_file,  "say not sure\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "I cant really say for sure\n");
		fprintf(phrase_file,  "say not sure\n");
		fprintf(phrase_file,  "say not sure\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "Phrase not understood\n");
		fprintf(phrase_file,  "elaborate\n");
		fprintf(phrase_file,  "elaborate\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "an <object>\n");
		fprintf(phrase_file,  "reduce\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "a <object>\n");
		fprintf(phrase_file,  "reduce\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "the <object>\n");
		fprintf(phrase_file,  "reduce\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "good <object>\n");
		fprintf(phrase_file,  "record adjective good\n");
		fprintf(phrase_file,  "add good adjective\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "little <object>\n");
		fprintf(phrase_file,  "record adjective little\n");
		fprintf(phrase_file,  "add little adjective\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "quick <object>\n");
		fprintf(phrase_file,  "record adjective quick\n");
		fprintf(phrase_file,  "add quick adjective\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "lazy <object>\n");
		fprintf(phrase_file,  "record adjective lazy\n");
		fprintf(phrase_file,  "add lazy adjective\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "green <object>\n");
		fprintf(phrase_file,  "record adjective green\n");
		fprintf(phrase_file,  "add green adjective\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "brown <object>\n");
		fprintf(phrase_file,  "record adjective brown\n");
		fprintf(phrase_file,  "add brown adjective\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "yellow <object>\n");
		fprintf(phrase_file,  "record adjective yellow\n");
		fprintf(phrase_file,  "add yellow adjective\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "white <object>\n");
		fprintf(phrase_file,  "record adjective white\n");
		fprintf(phrase_file,  "add white adjective\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "black <object>\n");
		fprintf(phrase_file,  "record adjective black\n");
		fprintf(phrase_file,  "add black adjective\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "red <object>\n");
		fprintf(phrase_file,  "record adjective red\n");
		fprintf(phrase_file,  "add red adjective\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "blue <object>\n");
		fprintf(phrase_file,  "record adjective blue\n");
		fprintf(phrase_file,  "add blue adjective\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "is <object> here\n");
		fprintf(phrase_file,  "find one facts plus is here yesno\n");
		fprintf(phrase_file,  "see if a implies b\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "I dont know\n");
		fprintf(phrase_file,  "acknowledge\n");
		fprintf(phrase_file,  "<OBJECT>\n");
		fprintf(phrase_file,  "normal\n");
		fprintf(phrase_file,  "<OBJECT>\n");
		fprintf(phrase_file,  "undefined\n");
		fprintf(phrase_file,  "none\n");
		fprintf(phrase_file,  "NORMAL\n");
		fprintf(phrase_file,  "END OF FILE\n");
		closefile(phrase_file);
	//}
}

void create_preproc_file(void)
{
	FILE *preproc_file;
	
	//if(access_file("preproc.txt")==0);
	//else
	//{
		preproc_file = openfile("preproc.txt", "w");		
		fprintf(preproc_file,  "you are i am\n");
		fprintf(preproc_file,  "i am you are\n");
		fprintf(preproc_file,  "are you am i\n");
		fprintf(preproc_file,  "am i are you\n");
		fprintf(preproc_file,  "my your\n");
		fprintf(preproc_file,  "your my\n");
		fprintf(preproc_file,  "i you\n");
		fprintf(preproc_file,  "you i\n");
		fprintf(preproc_file,  "u i\n");
		closefile(preproc_file);
	//}
}

void create_response_file(void)
{
	FILE *response_file;
	
	//if(access_file("response.rsp")==0);
	//else
	//{
		response_file = openfile("response.rsp", "w");
		fprintf(response_file,  "say no\n");
		fprintf(response_file,  "say no\n");
		fprintf(response_file,  "end\n");
		fprintf(response_file,  "say yes\n");
		fprintf(response_file,  "say yes\n");
		fprintf(response_file,  "end\n");
		fprintf(response_file,  "say not sure\n");
		fprintf(response_file,  "say dont know\n");
		fprintf(response_file,  "end\n");
		fprintf(response_file,  "greeting\n");
		fprintf(response_file,  "greeting\n");
		fprintf(response_file,  "end\n");
		fprintf(response_file,  "undefined\n");
		fprintf(response_file,  "elaborate\n");
		fprintf(response_file,  "end\n");
		fprintf(response_file,  "acknowledge\n");
		fprintf(response_file,  "acknowledge\n");
		fprintf(response_file,  "end\n");
		fprintf(response_file,  "say dont know\n");
		fprintf(response_file,  "say dont know\n");
		fprintf(response_file,  "end\n");
		fprintf(response_file,  "why ask\n");
		fprintf(response_file,  "say dont know\n");
		fprintf(response_file,  "end\n");
		fprintf(response_file,  "say goodbye\n");
		fprintf(response_file,  "say goodbye\n");
		fprintf(response_file,  "end\n");
		closefile(response_file);
	//}
}

void create_color_file(void)
{
	FILE *color_file;
	
	//if(access_file("color.fct")==0);
	//else
	//{
		color_file = openfile("color.fct", "w");
		fprintf(color_file, "blue is a color\n");
		fprintf(color_file, "red is a color\n"); 
		fprintf(color_file, "brown is a color\n"); 
		fprintf(color_file, "green is a color\n"); 
		fprintf(color_file, "white is a color\n"); 
		fprintf(color_file, "black is a color\n"); 
		fprintf(color_file, "yellow is a color\n");
		fprintf(color_file, "gold is a color\n");
		closefile(color_file);
	//}
}

void create_personality_file(void)
{
	FILE *personality_file;
	
	personality_file = openfile("personality.fct", "w");
	fprintf(personality_file, "my name is rufus\n");
	fprintf(personality_file, "I live in houston ohio\n");
	
	closefile(personality_file);

}
